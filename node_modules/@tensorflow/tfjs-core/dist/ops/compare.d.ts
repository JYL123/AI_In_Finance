import { Tensor } from '../tensor';
import { TensorLike } from '../types';
declare class CompareOps {
    static notEqual<T extends Tensor>(a: Tensor | TensorLike, b: Tensor | TensorLike): T;
    static notEqualStrict<T extends Tensor>(a: T | TensorLike, b: T | TensorLike): T;
    static less<T extends Tensor>(a: Tensor | TensorLike, b: Tensor | TensorLike): T;
    static lessStrict<T extends Tensor>(a: T | TensorLike, b: T | TensorLike): T;
    static equal<T extends Tensor>(a: Tensor | TensorLike, b: Tensor | TensorLike): T;
    static equalStrict<T extends Tensor>(a: T | TensorLike, b: T | TensorLike): T;
    static lessEqual<T extends Tensor>(a: Tensor | TensorLike, b: Tensor | TensorLike): T;
    static lessEqualStrict<T extends Tensor>(a: T | TensorLike, b: T | TensorLike): T;
    static greater<T extends Tensor>(a: Tensor | TensorLike, b: Tensor | TensorLike): T;
    static greaterStrict<T extends Tensor>(a: T | TensorLike, b: T | TensorLike): T;
    static greaterEqual<T extends Tensor>(a: Tensor | TensorLike, b: Tensor | TensorLike): T;
    static greaterEqualStrict<T extends Tensor>(a: T | TensorLike, b: T | TensorLike): T;
}
export declare const equal: typeof CompareOps.equal;
export declare const equalStrict: typeof CompareOps.equalStrict;
export declare const greater: typeof CompareOps.greater;
export declare const greaterEqual: typeof CompareOps.greaterEqual;
export declare const greaterEqualStrict: typeof CompareOps.greaterEqualStrict;
export declare const greaterStrict: typeof CompareOps.greaterStrict;
export declare const less: typeof CompareOps.less;
export declare const lessEqual: typeof CompareOps.lessEqual;
export declare const lessEqualStrict: typeof CompareOps.lessEqualStrict;
export declare const lessStrict: typeof CompareOps.lessStrict;
export declare const notEqual: typeof CompareOps.notEqual;
export declare const notEqualStrict: typeof CompareOps.notEqualStrict;
export {};
