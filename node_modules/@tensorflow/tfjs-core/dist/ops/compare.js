"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var tensor_util_1 = require("../tensor_util");
var util_1 = require("../util");
var broadcast_util_1 = require("./broadcast_util");
var operation_1 = require("./operation");
var CompareOps = (function () {
    function CompareOps() {
    }
    CompareOps.notEqual = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'notEqual');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'notEqual');
        tensor_util_1.assertTypesMatch($a, $b);
        broadcast_util_1.assertAndGetBroadcastShape($a.shape, $b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.notEqual($a, $b); }, { $a: $a, $b: $b });
    };
    CompareOps.notEqualStrict = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'notEqualStrict');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'notEqualStrict');
        util_1.assertShapesMatch($a.shape, $b.shape, 'Error in notEqualStrict: ');
        return $a.notEqual($b);
    };
    CompareOps.less = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'less');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'less');
        tensor_util_1.assertTypesMatch($a, $b);
        broadcast_util_1.assertAndGetBroadcastShape($a.shape, $b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.less($a, $b); }, { $a: $a, $b: $b });
    };
    CompareOps.lessStrict = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'lessStrict');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'lessStrict');
        util_1.assertShapesMatch($a.shape, $b.shape, 'Error in lessStrict: ');
        return $a.less($b);
    };
    CompareOps.equal = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'equal');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'equal');
        tensor_util_1.assertTypesMatch($a, $b);
        broadcast_util_1.assertAndGetBroadcastShape($a.shape, $b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.equal($a, $b); }, { $a: $a, $b: $b });
    };
    CompareOps.equalStrict = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'equalStrict');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'equalStrict');
        util_1.assertShapesMatch($a.shape, $b.shape, 'Error in equalStrict: ');
        return $a.equal($b);
    };
    CompareOps.lessEqual = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'lessEqual');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'lessEqual');
        tensor_util_1.assertTypesMatch($a, $b);
        broadcast_util_1.assertAndGetBroadcastShape($a.shape, $b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.lessEqual($a, $b); }, { $a: $a, $b: $b });
    };
    CompareOps.lessEqualStrict = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'lessEqualStrict');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'lessEqualStrict');
        util_1.assertShapesMatch($a.shape, $b.shape, 'Error in lessEqualStrict: ');
        return $a.lessEqual($b);
    };
    CompareOps.greater = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'greater');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'greater');
        tensor_util_1.assertTypesMatch($a, $b);
        broadcast_util_1.assertAndGetBroadcastShape($a.shape, $b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.greater($a, $b); }, { $a: $a, $b: $b });
    };
    CompareOps.greaterStrict = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'greaterStrict');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'greaterStrict');
        util_1.assertShapesMatch($a.shape, $b.shape, 'Error in greaterStrict: ');
        return $a.greater($b);
    };
    CompareOps.greaterEqual = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'greaterEqual');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'greaterEqual');
        tensor_util_1.assertTypesMatch($a, $b);
        broadcast_util_1.assertAndGetBroadcastShape($a.shape, $b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.greaterEqual($a, $b); }, { $a: $a, $b: $b });
    };
    CompareOps.greaterEqualStrict = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'greaterEqualStrict');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'greaterEqualStrict');
        util_1.assertShapesMatch($a.shape, $b.shape, 'Error in greaterEqualStrict: ');
        return $a.greaterEqual($b);
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' })
    ], CompareOps, "notEqual", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' })
    ], CompareOps, "less", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' })
    ], CompareOps, "equal", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' })
    ], CompareOps, "lessEqual", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' })
    ], CompareOps, "greater", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' })
    ], CompareOps, "greaterEqual", null);
    return CompareOps;
}());
exports.equal = operation_1.op(CompareOps.equal);
exports.equalStrict = operation_1.op(CompareOps.equalStrict);
exports.greater = operation_1.op(CompareOps.greater);
exports.greaterEqual = operation_1.op(CompareOps.greaterEqual);
exports.greaterEqualStrict = operation_1.op(CompareOps.greaterEqualStrict);
exports.greaterStrict = operation_1.op(CompareOps.greaterStrict);
exports.less = operation_1.op(CompareOps.less);
exports.lessEqual = operation_1.op(CompareOps.lessEqual);
exports.lessEqualStrict = operation_1.op(CompareOps.lessEqualStrict);
exports.lessStrict = operation_1.op(CompareOps.lessStrict);
exports.notEqual = operation_1.op(CompareOps.notEqual);
exports.notEqualStrict = operation_1.op(CompareOps.notEqualStrict);
//# sourceMappingURL=compare.js.map