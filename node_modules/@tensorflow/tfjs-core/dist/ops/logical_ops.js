"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var doc_1 = require("../doc");
var environment_1 = require("../environment");
var tensor_util_1 = require("../tensor_util");
var types = require("../types");
var util_1 = require("../util");
var broadcast_util_1 = require("./broadcast_util");
var operation_1 = require("./operation");
var tensor_ops_1 = require("./tensor_ops");
var LogicalOps = (function () {
    function LogicalOps() {
    }
    LogicalOps.logicalNot = function (x) {
        var $x = tensor_util_1.convertToTensor(x, 'x', 'logicalNot', 'bool');
        util_1.assert($x.dtype === 'bool', 'Error Array must be of type bool.');
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalNot($x); }, { $x: $x });
    };
    LogicalOps.logicalAnd = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'logicalAnd', 'bool');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'logicalAnd', 'bool');
        util_1.assert($a.dtype === 'bool' && $b.dtype === 'bool', 'Error Array must be of type bool.');
        broadcast_util_1.assertAndGetBroadcastShape($a.shape, $b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalAnd($a, $b); }, { $a: $a, $b: $b });
    };
    LogicalOps.logicalOr = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'logicalOr', 'bool');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'logicalOr', 'bool');
        util_1.assert($a.dtype === 'bool' && $b.dtype === 'bool', 'Error Array must be of type bool.');
        broadcast_util_1.assertAndGetBroadcastShape($a.shape, $b.shape);
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalOr($a, $b); }, { $a: $a, $b: $b });
    };
    LogicalOps.logicalXor = function (a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'logicalXor', 'bool');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'logicalXor', 'bool');
        util_1.assert($a.dtype === 'bool' && $b.dtype === 'bool', 'Error Array must be of type bool.');
        broadcast_util_1.assertAndGetBroadcastShape($a.shape, $b.shape);
        return LogicalOps.logicalOr(a, b).logicalAnd(LogicalOps.logicalAnd(a, b).logicalNot());
    };
    LogicalOps.where = function (condition, a, b) {
        var $a = tensor_util_1.convertToTensor(a, 'a', 'where');
        var $b = tensor_util_1.convertToTensor(b, 'b', 'where');
        var $condition = tensor_util_1.convertToTensor(condition, 'condition', 'where', 'bool');
        util_1.assert($condition.dtype === 'bool', 'Error Condition must be of type bool.');
        util_1.assertShapesMatch($a.shape, $b.shape, 'Error in where: ');
        if ($condition.rank === 1) {
            util_1.assert($condition.shape[0] === $a.shape[0], 'The first dimension of `a` must match the size of `condition`.');
        }
        else {
            util_1.assertShapesMatch($condition.shape, $b.shape, 'Error in where: ');
        }
        var dtype = types.upcastType($a.dtype, $b.dtype);
        var grad = function (dy) { return ({
            $condition: function () { return tensor_ops_1.zerosLike($condition); },
            $a: function () { return dy.mul($condition.cast($a.dtype)); },
            $b: function () { return dy.mul($condition.logicalNot().cast($b.dtype)); }
        }); };
        return environment_1.ENV.engine.runKernel(function (backend) { return backend.where($condition, $a, $b, dtype); }, { $condition: $condition, $a: $a, $b: $b }, grad);
    };
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' })
    ], LogicalOps, "logicalNot", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' })
    ], LogicalOps, "logicalAnd", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' })
    ], LogicalOps, "logicalOr", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' })
    ], LogicalOps, "logicalXor", null);
    __decorate([
        doc_1.doc({ heading: 'Operations', subheading: 'Logical' })
    ], LogicalOps, "where", null);
    return LogicalOps;
}());
exports.logicalAnd = operation_1.op(LogicalOps.logicalAnd);
exports.logicalNot = operation_1.op(LogicalOps.logicalNot);
exports.logicalOr = operation_1.op(LogicalOps.logicalOr);
exports.logicalXor = operation_1.op(LogicalOps.logicalXor);
exports.where = operation_1.op(LogicalOps.where);
//# sourceMappingURL=logical_ops.js.map