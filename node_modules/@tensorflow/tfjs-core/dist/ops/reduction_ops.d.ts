import { Tensor } from '../tensor';
import { TensorLike } from '../types';
declare class ReductionOps {
    static logSumExp<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static sum<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static mean<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static min<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static max<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static argMin<T extends Tensor>(x: Tensor | TensorLike, axis?: number): T;
    static argMax<T extends Tensor>(x: Tensor | TensorLike, axis?: number): T;
    static all<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static any<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static moments(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): {
        mean: Tensor;
        variance: Tensor;
    };
}
export declare const all: typeof ReductionOps.all;
export declare const any: typeof ReductionOps.any;
export declare const argMax: typeof ReductionOps.argMax;
export declare const argMin: typeof ReductionOps.argMin;
export declare const logSumExp: typeof ReductionOps.logSumExp;
export declare const max: typeof ReductionOps.max;
export declare const mean: typeof ReductionOps.mean;
export declare const min: typeof ReductionOps.min;
export declare const moments: typeof ReductionOps.moments;
export declare const sum: typeof ReductionOps.sum;
export {};
