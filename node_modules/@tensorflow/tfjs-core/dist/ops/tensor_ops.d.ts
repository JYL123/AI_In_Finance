import { Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, Tensor6D } from '../tensor';
import { TensorLike, TensorLike1D, TensorLike2D, TensorLike3D, TensorLike4D, TensorLike5D, TensorLike6D } from '../types';
import { DataType, Rank, ShapeMap } from '../types';
declare class TensorOps {
    static tensor<R extends Rank>(values: TensorLike, shape?: ShapeMap[R], dtype?: DataType): Tensor<R>;
    static scalar(value: number | boolean, dtype?: DataType): Scalar;
    static tensor1d(values: TensorLike1D, dtype?: DataType): Tensor1D;
    static tensor2d(values: TensorLike2D, shape?: [number, number], dtype?: DataType): Tensor2D;
    static tensor3d(values: TensorLike3D, shape?: [number, number, number], dtype?: DataType): Tensor3D;
    static tensor4d(values: TensorLike4D, shape?: [number, number, number, number], dtype?: DataType): Tensor4D;
    static tensor5d(values: TensorLike5D, shape?: [number, number, number, number, number], dtype?: DataType): Tensor5D;
    static tensor6d(values: TensorLike6D, shape?: [number, number, number, number, number, number], dtype?: DataType): Tensor6D;
    static ones<R extends Rank>(shape: ShapeMap[R], dtype?: DataType): Tensor<R>;
    static zeros<R extends Rank>(shape: ShapeMap[R], dtype?: DataType): Tensor<R>;
    static fill<R extends Rank>(shape: ShapeMap[R], value: number, dtype?: DataType): Tensor<R>;
    static onesLike<T extends Tensor>(x: T | TensorLike): T;
    static zerosLike<T extends Tensor>(x: T | TensorLike): T;
    static linspace(start: number, stop: number, num: number): Tensor1D;
    static range(start: number, stop: number, step?: number, dtype?: 'float32' | 'int32'): Tensor1D;
}
export declare const fill: typeof TensorOps.fill;
export declare const linspace: typeof TensorOps.linspace;
export declare const ones: typeof TensorOps.ones;
export declare const range: typeof TensorOps.range;
export declare const scalar: typeof TensorOps.scalar;
export declare const tensor: typeof TensorOps.tensor;
export declare const tensor1d: typeof TensorOps.tensor1d;
export declare const tensor2d: typeof TensorOps.tensor2d;
export declare const tensor3d: typeof TensorOps.tensor3d;
export declare const tensor4d: typeof TensorOps.tensor4d;
export declare const tensor5d: typeof TensorOps.tensor5d;
export declare const tensor6d: typeof TensorOps.tensor6d;
export declare const zeros: typeof TensorOps.zeros;
export declare const onesLike: typeof TensorOps.onesLike;
export declare const zerosLike: typeof TensorOps.zerosLike;
export {};
