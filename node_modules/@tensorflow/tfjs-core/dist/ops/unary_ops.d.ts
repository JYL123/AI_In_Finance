import { Tensor } from '../tensor';
import { TensorLike } from '../types';
declare class UnaryOps {
    static neg<T extends Tensor>(x: T | TensorLike): T;
    static ceil<T extends Tensor>(x: T | TensorLike): T;
    static floor<T extends Tensor>(x: T | TensorLike): T;
    static sign<T extends Tensor>(x: T | TensorLike): T;
    static round<T extends Tensor>(x: T | TensorLike): T;
    static exp<T extends Tensor>(x: T | TensorLike): T;
    static expm1<T extends Tensor>(x: T | TensorLike): T;
    static log<T extends Tensor>(x: T | TensorLike): T;
    static log1p<T extends Tensor>(x: T | TensorLike): T;
    static sqrt<T extends Tensor>(x: T | TensorLike): T;
    static rsqrt<T extends Tensor>(x: T | TensorLike): T;
    static square<T extends Tensor>(x: T | TensorLike): T;
    static reciprocal<T extends Tensor>(x: T | TensorLike): T;
    static abs<T extends Tensor>(x: T | TensorLike): T;
    static clipByValue<T extends Tensor>(x: T | TensorLike, clipValueMin: number, clipValueMax: number): T;
    static sigmoid<T extends Tensor>(x: T | TensorLike): T;
    static logSigmoid<T extends Tensor>(x: T | TensorLike): T;
    static softplus<T extends Tensor>(x: T | TensorLike): T;
    static sin<T extends Tensor>(x: T | TensorLike): T;
    static cos<T extends Tensor>(x: T | TensorLike): T;
    static tan<T extends Tensor>(x: T | TensorLike): T;
    static asin<T extends Tensor>(x: T | TensorLike): T;
    static acos<T extends Tensor>(x: T | TensorLike): T;
    static atan<T extends Tensor>(x: T | TensorLike): T;
    static sinh<T extends Tensor>(x: T | TensorLike): T;
    static cosh<T extends Tensor>(x: T | TensorLike): T;
    static tanh<T extends Tensor>(x: T | TensorLike): T;
    static asinh<T extends Tensor>(x: T | TensorLike): T;
    static acosh<T extends Tensor>(x: T | TensorLike): T;
    static atanh<T extends Tensor>(x: T | TensorLike): T;
    static erf<T extends Tensor>(x: T | TensorLike): T;
    static step<T extends Tensor>(x: T | TensorLike, alpha?: number): T;
}
export declare const abs: typeof UnaryOps.abs;
export declare const acos: typeof UnaryOps.acos;
export declare const acosh: typeof UnaryOps.acosh;
export declare const asin: typeof UnaryOps.asin;
export declare const asinh: typeof UnaryOps.asinh;
export declare const atan: typeof UnaryOps.atan;
export declare const atanh: typeof UnaryOps.atanh;
export declare const ceil: typeof UnaryOps.ceil;
export declare const clipByValue: typeof UnaryOps.clipByValue;
export declare const cos: typeof UnaryOps.cos;
export declare const cosh: typeof UnaryOps.cosh;
export declare const erf: typeof UnaryOps.erf;
export declare const exp: typeof UnaryOps.exp;
export declare const expm1: typeof UnaryOps.expm1;
export declare const floor: typeof UnaryOps.floor;
export declare const log: typeof UnaryOps.log;
export declare const log1p: typeof UnaryOps.log1p;
export declare const logSigmoid: typeof UnaryOps.logSigmoid;
export declare const neg: typeof UnaryOps.neg;
export declare const reciprocal: typeof UnaryOps.reciprocal;
export declare const round: typeof UnaryOps.round;
export declare const rsqrt: typeof UnaryOps.rsqrt;
export declare const sigmoid: typeof UnaryOps.sigmoid;
export declare const sign: typeof UnaryOps.sign;
export declare const sin: typeof UnaryOps.sin;
export declare const sinh: typeof UnaryOps.sinh;
export declare const softplus: typeof UnaryOps.softplus;
export declare const sqrt: typeof UnaryOps.sqrt;
export declare const square: typeof UnaryOps.square;
export declare const step: typeof UnaryOps.step;
export declare const tan: typeof UnaryOps.tan;
export declare const tanh: typeof UnaryOps.tanh;
export {};
